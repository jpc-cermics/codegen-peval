// Warning: this file is automatically generated
// do not edit manually !

function version=bvar_lib() version="1.0";endfunction

function out=plus_bvar_bvar(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1) <> datatype(in2) then error("Incompatible types"),end
  if ~is_sym(in1) && ~is_sym(in2) then 
    out=(valueof(in1)+valueof(in2));
    return
  end
  if (prod(size(valueof(in1)))==1) & (prod(size(valueof(in2)))==1) then
    if ~is_sym(in1)&valueof(in1)==0 then out=in2;return;end
    if ~is_sym(in2)&valueof(in2)==0 then out=in1;return;end
    vin1= valueof(in1);vin2= valueof(in2);
    out=symbolics(vin1+vin2,getunique())
    rhs=expression("+",list(in1,in2),overflow_opt)
    gen_def(out,rhs)
  else
    out=Empty(valueof(in1)+valueof(in2))
    sz=size(valueof(out));sz1=size(valueof(in1));sz2=size(valueof(in2))
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=in1(min(i,sz1(1)),min(j,sz1(2)))+in2(min(i,sz2(1)),min(j,sz2(2)))
      end
    end
  end
endfunction

function out=plus_bvar_m(in1,in2)
  out=plus_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=plus_m_bvar(in1,in2)
  out=plus_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=plus_bvar_i(in1,in2)
  out=plus_bvar_bvar(in1,in2)
endfunction

function out=plus_i_bvar(in1,in2)
  out=plus_bvar_bvar(in1,in2)
endfunction

function out=plus_i_m(in1,in2)
  out=plus_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=plus_m_i(in1,in2)
  out=plus_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=minus_bvar_bvar(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1) <> datatype(in2) then error("Incompatible types"),end
  if ~is_sym(in1) && ~is_sym(in2) then 
    out=(valueof(in1)-valueof(in2));
    return
  end
  if (prod(size(valueof(in1)))==1) & (prod(size(valueof(in2)))==1) then
    if ~is_sym(in1)&valueof(in1)==0 then out=-in2;return;end
    vin1= valueof(in1);vin2= valueof(in2);
    out=symbolics(vin1-vin2,getunique())
    rhs=expression("-",list(in1,in2),overflow_opt)
    gen_def(out,rhs)
  else
    out=Empty(valueof(in1)-valueof(in2))
    sz=size(valueof(out));sz1=size(valueof(in1));sz2=size(valueof(in2))
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=in1(min(i,sz1(1)),min(j,sz1(2)))-in2(min(i,sz2(1)),min(j,sz2(2)))
      end
    end
  end
endfunction

function out=minus_bvar_m(in1,in2)
  out=minus_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=minus_m_bvar(in1,in2)
  out=minus_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=minus_bvar_i(in1,in2)
  out=minus_bvar_bvar(in1,in2)
endfunction

function out=minus_i_bvar(in1,in2)
  out=minus_bvar_bvar(in1,in2)
endfunction

function out=minus_i_m(in1,in2)
  out=minus_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=minus_m_i(in1,in2)
  out=minus_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=dst_bvar_bvar(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1) <> datatype(in2) then error("Incompatible types"),end
  if ~is_sym(in1) && ~is_sym(in2) then 
    out=(valueof(in1).*valueof(in2));
    return
  end
  if (prod(size(valueof(in1)))==1) & (prod(size(valueof(in2)))==1) then
    out=in1*in2;return
    vin1= valueof(in1);vin2= valueof(in2);
    out=symbolics(vin1.*vin2,getunique())
    rhs=expression(".*",list(in1,in2),overflow_opt)
    gen_def(out,rhs)
  else
    out=Empty(valueof(in1).*valueof(in2))
    sz=size(valueof(out));sz1=size(valueof(in1));sz2=size(valueof(in2))
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=in1(min(i,sz1(1)),min(j,sz1(2))).*in2(min(i,sz2(1)),min(j,sz2(2)))
      end
    end
  end
endfunction

function out=dst_bvar_m(in1,in2)
  out=dst_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=dst_m_bvar(in1,in2)
  out=dst_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=dst_bvar_i(in1,in2)
  out=dst_bvar_bvar(in1,in2)
endfunction

function out=dst_i_bvar(in1,in2)
  out=dst_bvar_bvar(in1,in2)
endfunction

function out=dst_i_m(in1,in2)
  out=dst_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=dst_m_i(in1,in2)
  out=dst_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=dsl_bvar_bvar(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1) <> datatype(in2) then error("Incompatible types"),end
  if ~is_sym(in1) && ~is_sym(in2) then 
    out=(valueof(in1)./valueof(in2));
    return
  end
  if (prod(size(valueof(in1)))==1) & (prod(size(valueof(in2)))==1) then
    out=in1/in2;return
    vin1= valueof(in1);vin2= valueof(in2);
    out=symbolics(vin1./vin2,getunique())
    rhs=expression("./",list(in1,in2),overflow_opt)
    gen_def(out,rhs)
  else
    out=Empty(valueof(in1)./valueof(in2))
    sz=size(valueof(out));sz1=size(valueof(in1));sz2=size(valueof(in2))
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=in1(min(i,sz1(1)),min(j,sz1(2)))./in2(min(i,sz2(1)),min(j,sz2(2)))
      end
    end
  end
endfunction

function out=dsl_bvar_m(in1,in2)
  out=dsl_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=dsl_m_bvar(in1,in2)
  out=dsl_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=dsl_bvar_i(in1,in2)
  out=dsl_bvar_bvar(in1,in2)
endfunction

function out=dsl_i_bvar(in1,in2)
  out=dsl_bvar_bvar(in1,in2)
endfunction

function out=dsl_i_m(in1,in2)
  out=dsl_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=dsl_m_i(in1,in2)
  out=dsl_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=dbs_bvar_bvar(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1) <> datatype(in2) then error("Incompatible types"),end
  if ~is_sym(in1) && ~is_sym(in2) then 
    out=(valueof(in1).\valueof(in2));
    return
  end
  if (prod(size(valueof(in1)))==1) & (prod(size(valueof(in2)))==1) then
    out=in2/in1;return
    vin1= valueof(in1);vin2= valueof(in2);
    out=symbolics(vin1.\vin2,getunique())
    rhs=expression(".\",list(in1,in2),overflow_opt)
    gen_def(out,rhs)
  else
    out=Empty(valueof(in1).\valueof(in2))
    sz=size(valueof(out));sz1=size(valueof(in1));sz2=size(valueof(in2))
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=in1(min(i,sz1(1)),min(j,sz1(2))).\in2(min(i,sz2(1)),min(j,sz2(2)))
      end
    end
  end
endfunction

function out=dbs_bvar_m(in1,in2)
  out=dbs_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=dbs_m_bvar(in1,in2)
  out=dbs_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=dbs_bvar_i(in1,in2)
  out=dbs_bvar_bvar(in1,in2)
endfunction

function out=dbs_i_bvar(in1,in2)
  out=dbs_bvar_bvar(in1,in2)
endfunction

function out=dbs_i_m(in1,in2)
  out=dbs_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=dbs_m_i(in1,in2)
  out=dbs_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=and_bvar_bvar(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1) <> datatype(in2) then error("Incompatible types"),end
  if ~is_sym(in1) && ~is_sym(in2) then 
    out=(valueof(in1)&valueof(in2));
    return
  end
  if (prod(size(valueof(in1)))==1) & (prod(size(valueof(in2)))==1) then
    if ~is_sym(in1)&valueof(in1) then out=in2;return;end
    if ~is_sym(in2)&valueof(in2) then out=in1;return;end
    if ~is_sym(in1)&~valueof(in1) then out=0;return;end
    if ~is_sym(in2)&~valueof(in2) then out=0;return;end
    vin1= valueof(in1);vin2= valueof(in2);
    out=symbolics(vin1&vin2,getunique())
    rhs=expression("&",list(in1,in2),overflow_opt)
    gen_def(out,rhs)
  else
    out=Empty(valueof(in1)&valueof(in2))
    sz=size(valueof(out));sz1=size(valueof(in1));sz2=size(valueof(in2))
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=in1(min(i,sz1(1)),min(j,sz1(2)))&in2(min(i,sz2(1)),min(j,sz2(2)))
      end
    end
  end
endfunction

function out=and_bvar_m(in1,in2)
  out=and_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=and_m_bvar(in1,in2)
  out=and_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=and_bvar_i(in1,in2)
  out=and_bvar_bvar(in1,in2)
endfunction

function out=and_i_bvar(in1,in2)
  out=and_bvar_bvar(in1,in2)
endfunction

function out=and_i_m(in1,in2)
  out=and_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=and_m_i(in1,in2)
  out=and_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=or_bvar_bvar(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1) <> datatype(in2) then error("Incompatible types"),end
  if ~is_sym(in1) && ~is_sym(in2) then 
    out=(valueof(in1)|valueof(in2));
    return
  end
  if (prod(size(valueof(in1)))==1) & (prod(size(valueof(in2)))==1) then
    if ~is_sym(in1)&valueof(in1) then out=1;return;end
    if ~is_sym(in2)&valueof(in2) then out=1;return;end
    if ~is_sym(in1)&~valueof(in1) then out=in2;return;end
    if ~is_sym(in2)&~valueof(in2) then out=in1;return;end
    vin1= valueof(in1);vin2= valueof(in2);
    out=symbolics(vin1|vin2,getunique())
    rhs=expression("|",list(in1,in2),overflow_opt)
    gen_def(out,rhs)
  else
    out=Empty(valueof(in1)|valueof(in2))
    sz=size(valueof(out));sz1=size(valueof(in1));sz2=size(valueof(in2))
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=in1(min(i,sz1(1)),min(j,sz1(2)))|in2(min(i,sz2(1)),min(j,sz2(2)))
      end
    end
  end
endfunction

function out=or_bvar_m(in1,in2)
  out=or_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=or_m_bvar(in1,in2)
  out=or_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=or_bvar_i(in1,in2)
  out=or_bvar_bvar(in1,in2)
endfunction

function out=or_i_bvar(in1,in2)
  out=or_bvar_bvar(in1,in2)
endfunction

function out=or_i_m(in1,in2)
  out=or_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=or_m_i(in1,in2)
  out=or_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=seq_and_bvar_bvar(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1) <> datatype(in2) then error("Incompatible types"),end
  if ~is_sym(in1) && ~is_sym(in2) then 
    out=(valueof(in1)&&valueof(in2));
    return
  end
  if (prod(size(valueof(in1)))==1) & (prod(size(valueof(in2)))==1) then
    if ~is_sym(in1)&valueof(in1) then out=in2;return;end
    if ~is_sym(in2)&valueof(in2) then out=in1;return;end
    if ~is_sym(in1)&~valueof(in1) then out=0;return;end
    if ~is_sym(in2)&~valueof(in2) then out=0;return;end
    vin1= valueof(in1);vin2= valueof(in2);
    out=symbolics(vin1&&vin2,getunique())
    rhs=expression("&&",list(in1,in2),overflow_opt)
    gen_def(out,rhs)
  else
    out=Empty(valueof(in1)&&valueof(in2))
    sz=size(valueof(out));sz1=size(valueof(in1));sz2=size(valueof(in2))
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=in1(min(i,sz1(1)),min(j,sz1(2)))&&in2(min(i,sz2(1)),min(j,sz2(2)))
      end
    end
  end
endfunction

function out=seq_and_bvar_m(in1,in2)
  out=seq_and_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=seq_and_m_bvar(in1,in2)
  out=seq_and_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=seq_and_bvar_i(in1,in2)
  out=seq_and_bvar_bvar(in1,in2)
endfunction

function out=seq_and_i_bvar(in1,in2)
  out=seq_and_bvar_bvar(in1,in2)
endfunction

function out=seq_and_i_m(in1,in2)
  out=seq_and_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=seq_and_m_i(in1,in2)
  out=seq_and_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=seq_or_bvar_bvar(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1) <> datatype(in2) then error("Incompatible types"),end
  if ~is_sym(in1) && ~is_sym(in2) then 
    out=(valueof(in1)||valueof(in2));
    return
  end
  if (prod(size(valueof(in1)))==1) & (prod(size(valueof(in2)))==1) then
    if ~is_sym(in1)&valueof(in1) then out=1;return;end
    if ~is_sym(in2)&valueof(in2) then out=1;return;end
    if ~is_sym(in1)&~valueof(in1) then out=in2;return;end
    if ~is_sym(in2)&~valueof(in2) then out=in1;return;end
    vin1= valueof(in1);vin2= valueof(in2);
    out=symbolics(vin1||vin2,getunique())
    rhs=expression("||",list(in1,in2),overflow_opt)
    gen_def(out,rhs)
  else
    out=Empty(valueof(in1)||valueof(in2))
    sz=size(valueof(out));sz1=size(valueof(in1));sz2=size(valueof(in2))
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=in1(min(i,sz1(1)),min(j,sz1(2)))||in2(min(i,sz2(1)),min(j,sz2(2)))
      end
    end
  end
endfunction

function out=seq_or_bvar_m(in1,in2)
  out=seq_or_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=seq_or_m_bvar(in1,in2)
  out=seq_or_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=seq_or_bvar_i(in1,in2)
  out=seq_or_bvar_bvar(in1,in2)
endfunction

function out=seq_or_i_bvar(in1,in2)
  out=seq_or_bvar_bvar(in1,in2)
endfunction

function out=seq_or_i_m(in1,in2)
  out=seq_or_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=seq_or_m_i(in1,in2)
  out=seq_or_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=eq_bvar_bvar(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1) <> datatype(in2) then error("Incompatible types"),end
  if ~is_sym(in1) && ~is_sym(in2) then 
    out=(valueof(in1)==valueof(in2));
    return
  end
  if (prod(size(valueof(in1)))==1) & (prod(size(valueof(in2)))==1) then
    vin1= valueof(in1);vin2= valueof(in2);
    out=symbolics(vin1==vin2,getunique())
    rhs=expression("==",list(in1,in2),overflow_opt)
    gen_def(out,rhs)
  else
    out=Empty(valueof(in1)==valueof(in2))
    sz=size(valueof(out));sz1=size(valueof(in1));sz2=size(valueof(in2))
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=in1(min(i,sz1(1)),min(j,sz1(2)))==in2(min(i,sz2(1)),min(j,sz2(2)))
      end
    end
  end
endfunction

function out=eq_bvar_m(in1,in2)
  out=eq_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=eq_m_bvar(in1,in2)
  out=eq_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=eq_bvar_i(in1,in2)
  out=eq_bvar_bvar(in1,in2)
endfunction

function out=eq_i_bvar(in1,in2)
  out=eq_bvar_bvar(in1,in2)
endfunction

function out=eq_i_m(in1,in2)
  out=eq_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=eq_m_i(in1,in2)
  out=eq_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=ne_bvar_bvar(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1) <> datatype(in2) then error("Incompatible types"),end
  if ~is_sym(in1) && ~is_sym(in2) then 
    out=(valueof(in1)<>valueof(in2));
    return
  end
  if (prod(size(valueof(in1)))==1) & (prod(size(valueof(in2)))==1) then
    vin1= valueof(in1);vin2= valueof(in2);
    out=symbolics(vin1<>vin2,getunique())
    rhs=expression("<>",list(in1,in2),overflow_opt)
    gen_def(out,rhs)
  else
    out=Empty(valueof(in1)<>valueof(in2))
    sz=size(valueof(out));sz1=size(valueof(in1));sz2=size(valueof(in2))
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=in1(min(i,sz1(1)),min(j,sz1(2)))<>in2(min(i,sz2(1)),min(j,sz2(2)))
      end
    end
  end
endfunction

function out=ne_bvar_m(in1,in2)
  out=ne_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=ne_m_bvar(in1,in2)
  out=ne_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=ne_bvar_i(in1,in2)
  out=ne_bvar_bvar(in1,in2)
endfunction

function out=ne_i_bvar(in1,in2)
  out=ne_bvar_bvar(in1,in2)
endfunction

function out=ne_i_m(in1,in2)
  out=ne_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=ne_m_i(in1,in2)
  out=ne_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=gt_bvar_bvar(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1) <> datatype(in2) then error("Incompatible types"),end
  if ~is_sym(in1) && ~is_sym(in2) then 
    out=(valueof(in1)>valueof(in2));
    return
  end
  if (prod(size(valueof(in1)))==1) & (prod(size(valueof(in2)))==1) then
    vin1= valueof(in1);vin2= valueof(in2);
    out=symbolics(vin1>vin2,getunique())
    rhs=expression(">",list(in1,in2),overflow_opt)
    gen_def(out,rhs)
  else
    out=Empty(valueof(in1)>valueof(in2))
    sz=size(valueof(out));sz1=size(valueof(in1));sz2=size(valueof(in2))
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=in1(min(i,sz1(1)),min(j,sz1(2)))>in2(min(i,sz2(1)),min(j,sz2(2)))
      end
    end
  end
endfunction

function out=gt_bvar_m(in1,in2)
  out=gt_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=gt_m_bvar(in1,in2)
  out=gt_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=gt_bvar_i(in1,in2)
  out=gt_bvar_bvar(in1,in2)
endfunction

function out=gt_i_bvar(in1,in2)
  out=gt_bvar_bvar(in1,in2)
endfunction

function out=gt_i_m(in1,in2)
  out=gt_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=gt_m_i(in1,in2)
  out=gt_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=lt_bvar_bvar(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1) <> datatype(in2) then error("Incompatible types"),end
  if ~is_sym(in1) && ~is_sym(in2) then 
    out=(valueof(in1)<valueof(in2));
    return
  end
  if (prod(size(valueof(in1)))==1) & (prod(size(valueof(in2)))==1) then
    vin1= valueof(in1);vin2= valueof(in2);
    out=symbolics(vin1<vin2,getunique())
    rhs=expression("<",list(in1,in2),overflow_opt)
    gen_def(out,rhs)
  else
    out=Empty(valueof(in1)<valueof(in2))
    sz=size(valueof(out));sz1=size(valueof(in1));sz2=size(valueof(in2))
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=in1(min(i,sz1(1)),min(j,sz1(2)))<in2(min(i,sz2(1)),min(j,sz2(2)))
      end
    end
  end
endfunction

function out=lt_bvar_m(in1,in2)
  out=lt_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=lt_m_bvar(in1,in2)
  out=lt_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=lt_bvar_i(in1,in2)
  out=lt_bvar_bvar(in1,in2)
endfunction

function out=lt_i_bvar(in1,in2)
  out=lt_bvar_bvar(in1,in2)
endfunction

function out=lt_i_m(in1,in2)
  out=lt_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=lt_m_i(in1,in2)
  out=lt_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=ge_bvar_bvar(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1) <> datatype(in2) then error("Incompatible types"),end
  if ~is_sym(in1) && ~is_sym(in2) then 
    out=(valueof(in1)>=valueof(in2));
    return
  end
  if (prod(size(valueof(in1)))==1) & (prod(size(valueof(in2)))==1) then
    vin1= valueof(in1);vin2= valueof(in2);
    out=symbolics(vin1>=vin2,getunique())
    rhs=expression(">=",list(in1,in2),overflow_opt)
    gen_def(out,rhs)
  else
    out=Empty(valueof(in1)>=valueof(in2))
    sz=size(valueof(out));sz1=size(valueof(in1));sz2=size(valueof(in2))
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=in1(min(i,sz1(1)),min(j,sz1(2)))>=in2(min(i,sz2(1)),min(j,sz2(2)))
      end
    end
  end
endfunction

function out=ge_bvar_m(in1,in2)
  out=ge_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=ge_m_bvar(in1,in2)
  out=ge_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=ge_bvar_i(in1,in2)
  out=ge_bvar_bvar(in1,in2)
endfunction

function out=ge_i_bvar(in1,in2)
  out=ge_bvar_bvar(in1,in2)
endfunction

function out=ge_i_m(in1,in2)
  out=ge_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=ge_m_i(in1,in2)
  out=ge_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=le_bvar_bvar(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1) <> datatype(in2) then error("Incompatible types"),end
  if ~is_sym(in1) && ~is_sym(in2) then 
    out=(valueof(in1)<=valueof(in2));
    return
  end
  if (prod(size(valueof(in1)))==1) & (prod(size(valueof(in2)))==1) then
    vin1= valueof(in1);vin2= valueof(in2);
    out=symbolics(vin1<=vin2,getunique())
    rhs=expression("<=",list(in1,in2),overflow_opt)
    gen_def(out,rhs)
  else
    out=Empty(valueof(in1)<=valueof(in2))
    sz=size(valueof(out));sz1=size(valueof(in1));sz2=size(valueof(in2))
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=in1(min(i,sz1(1)),min(j,sz1(2)))<=in2(min(i,sz2(1)),min(j,sz2(2)))
      end
    end
  end
endfunction

function out=le_bvar_m(in1,in2)
  out=le_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=le_m_bvar(in1,in2)
  out=le_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=le_bvar_i(in1,in2)
  out=le_bvar_bvar(in1,in2)
endfunction

function out=le_i_bvar(in1,in2)
  out=le_bvar_bvar(in1,in2)
endfunction

function out=le_i_m(in1,in2)
  out=le_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=le_m_i(in1,in2)
  out=le_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=dh_bvar_bvar(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1) <> datatype(in2) then error("Incompatible types"),end
  if ~is_sym(in1) && ~is_sym(in2) then 
    out=(valueof(in1).^valueof(in2));
    return
  end
  if (prod(size(valueof(in1)))==1) & (prod(size(valueof(in2)))==1) then
    vin1= valueof(in1);vin2= valueof(in2);
    out=symbolics(vin1.^vin2,getunique())
    rhs=expression(".^",list(in1,in2),overflow_opt)
    gen_def(out,rhs)
  else
    out=Empty(valueof(in1).^valueof(in2))
    sz=size(valueof(out));sz1=size(valueof(in1));sz2=size(valueof(in2))
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=in1(min(i,sz1(1)),min(j,sz1(2))).^in2(min(i,sz2(1)),min(j,sz2(2)))
      end
    end
  end
endfunction

function out=dh_bvar_m(in1,in2)
  out=dh_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=dh_m_bvar(in1,in2)
  out=dh_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=dh_bvar_i(in1,in2)
  out=dh_bvar_bvar(in1,in2)
endfunction

function out=dh_i_bvar(in1,in2)
  out=dh_bvar_bvar(in1,in2)
endfunction

function out=dh_i_m(in1,in2)
  out=dh_bvar_bvar(in1,convert(in2,datatype(in1)))
endfunction

function out=dh_m_i(in1,in2)
  out=dh_bvar_bvar(convert(in1,datatype(in2)),in2)
endfunction

function out=sin_bvar(in)
  if ~is_sym(in) then out=(sin(valueof(in)));return;end
  if (prod(size(valueof(in)))==1) then
    out=symbolics(sin(valueof(in)),getunique())
    rhs=expression("sin",list(in))
    gen_def(out,rhs)
  else
    out=Empty(sin(valueof(in)))
    sz=size(valueof(out));
    code_insert('annotation',sprintf('sin(%s) of size %dx%d',in.get_varname[],sz(1),sz(2)));
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=sin(in(i,j))
      end
    end
    code_insert('annotation',sprintf('end of sin(%s), result in %s',in.get_varname[],out.get_varname[]));
  end
endfunction

function out=cos_bvar(in)
  if ~is_sym(in) then out=(cos(valueof(in)));return;end
  if (prod(size(valueof(in)))==1) then
    out=symbolics(cos(valueof(in)),getunique())
    rhs=expression("cos",list(in))
    gen_def(out,rhs)
  else
    out=Empty(cos(valueof(in)))
    sz=size(valueof(out));
    code_insert('annotation',sprintf('cos(%s) of size %dx%d',in.get_varname[],sz(1),sz(2)));
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=cos(in(i,j))
      end
    end
    code_insert('annotation',sprintf('end of cos(%s), result in %s',in.get_varname[],out.get_varname[]));
  end
endfunction

function out=tan_bvar(in)
  if ~is_sym(in) then out=(tan(valueof(in)));return;end
  if (prod(size(valueof(in)))==1) then
    out=symbolics(tan(valueof(in)),getunique())
    rhs=expression("tan",list(in))
    gen_def(out,rhs)
  else
    out=Empty(tan(valueof(in)))
    sz=size(valueof(out));
    code_insert('annotation',sprintf('tan(%s) of size %dx%d',in.get_varname[],sz(1),sz(2)));
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=tan(in(i,j))
      end
    end
    code_insert('annotation',sprintf('end of tan(%s), result in %s',in.get_varname[],out.get_varname[]));
  end
endfunction

function out=asin_bvar(in)
  if ~is_sym(in) then out=(asin(valueof(in)));return;end
  if (prod(size(valueof(in)))==1) then
    out=symbolics(asin(valueof(in)),getunique())
    rhs=expression("asin",list(in))
    gen_def(out,rhs)
  else
    out=Empty(asin(valueof(in)))
    sz=size(valueof(out));
    code_insert('annotation',sprintf('asin(%s) of size %dx%d',in.get_varname[],sz(1),sz(2)));
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=asin(in(i,j))
      end
    end
    code_insert('annotation',sprintf('end of asin(%s), result in %s',in.get_varname[],out.get_varname[]));
  end
endfunction

function out=acos_bvar(in)
  if ~is_sym(in) then out=(acos(valueof(in)));return;end
  if (prod(size(valueof(in)))==1) then
    out=symbolics(acos(valueof(in)),getunique())
    rhs=expression("acos",list(in))
    gen_def(out,rhs)
  else
    out=Empty(acos(valueof(in)))
    sz=size(valueof(out));
    code_insert('annotation',sprintf('acos(%s) of size %dx%d',in.get_varname[],sz(1),sz(2)));
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=acos(in(i,j))
      end
    end
    code_insert('annotation',sprintf('end of acos(%s), result in %s',in.get_varname[],out.get_varname[]));
  end
endfunction

function out=atan_bvar(in)
  if ~is_sym(in) then out=(atan(valueof(in)));return;end
  if (prod(size(valueof(in)))==1) then
    out=symbolics(atan(valueof(in)),getunique())
    rhs=expression("atan",list(in))
    gen_def(out,rhs)
  else
    out=Empty(atan(valueof(in)))
    sz=size(valueof(out));
    code_insert('annotation',sprintf('atan(%s) of size %dx%d',in.get_varname[],sz(1),sz(2)));
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=atan(in(i,j))
      end
    end
    code_insert('annotation',sprintf('end of atan(%s), result in %s',in.get_varname[],out.get_varname[]));
  end
endfunction

function out=sinh_bvar(in)
  if ~is_sym(in) then out=(sinh(valueof(in)));return;end
  if (prod(size(valueof(in)))==1) then
    out=symbolics(sinh(valueof(in)),getunique())
    rhs=expression("sinh",list(in))
    gen_def(out,rhs)
  else
    out=Empty(sinh(valueof(in)))
    sz=size(valueof(out));
    code_insert('annotation',sprintf('sinh(%s) of size %dx%d',in.get_varname[],sz(1),sz(2)));
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=sinh(in(i,j))
      end
    end
    code_insert('annotation',sprintf('end of sinh(%s), result in %s',in.get_varname[],out.get_varname[]));
  end
endfunction

function out=cosh_bvar(in)
  if ~is_sym(in) then out=(cosh(valueof(in)));return;end
  if (prod(size(valueof(in)))==1) then
    out=symbolics(cosh(valueof(in)),getunique())
    rhs=expression("cosh",list(in))
    gen_def(out,rhs)
  else
    out=Empty(cosh(valueof(in)))
    sz=size(valueof(out));
    code_insert('annotation',sprintf('cosh(%s) of size %dx%d',in.get_varname[],sz(1),sz(2)));
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=cosh(in(i,j))
      end
    end
    code_insert('annotation',sprintf('end of cosh(%s), result in %s',in.get_varname[],out.get_varname[]));
  end
endfunction

function out=tanh_bvar(in)
  if ~is_sym(in) then out=(tanh(valueof(in)));return;end
  if (prod(size(valueof(in)))==1) then
    out=symbolics(tanh(valueof(in)),getunique())
    rhs=expression("tanh",list(in))
    gen_def(out,rhs)
  else
    out=Empty(tanh(valueof(in)))
    sz=size(valueof(out));
    code_insert('annotation',sprintf('tanh(%s) of size %dx%d',in.get_varname[],sz(1),sz(2)));
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=tanh(in(i,j))
      end
    end
    code_insert('annotation',sprintf('end of tanh(%s), result in %s',in.get_varname[],out.get_varname[]));
  end
endfunction

function out=sqrt_bvar(in)
  if ~is_sym(in) then out=(sqrt(valueof(in)));return;end
  if (prod(size(valueof(in)))==1) then
    out=symbolics(sqrt(valueof(in)),getunique())
    rhs=expression("sqrt",list(in))
    gen_def(out,rhs)
  else
    out=Empty(sqrt(valueof(in)))
    sz=size(valueof(out));
    code_insert('annotation',sprintf('sqrt(%s) of size %dx%d',in.get_varname[],sz(1),sz(2)));
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=sqrt(in(i,j))
      end
    end
    code_insert('annotation',sprintf('end of sqrt(%s), result in %s',in.get_varname[],out.get_varname[]));
  end
endfunction

function out=log_bvar(in)
  if ~is_sym(in) then out=(log(valueof(in)));return;end
  if (prod(size(valueof(in)))==1) then
    out=symbolics(log(valueof(in)),getunique())
    rhs=expression("log",list(in))
    gen_def(out,rhs)
  else
    out=Empty(log(valueof(in)))
    sz=size(valueof(out));
    code_insert('annotation',sprintf('log(%s) of size %dx%d',in.get_varname[],sz(1),sz(2)));
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=log(in(i,j))
      end
    end
    code_insert('annotation',sprintf('end of log(%s), result in %s',in.get_varname[],out.get_varname[]));
  end
endfunction

function out=exp_bvar(in)
  if ~is_sym(in) then out=(exp(valueof(in)));return;end
  if (prod(size(valueof(in)))==1) then
    out=symbolics(exp(valueof(in)),getunique())
    rhs=expression("exp",list(in))
    gen_def(out,rhs)
  else
    out=Empty(exp(valueof(in)))
    sz=size(valueof(out));
    code_insert('annotation',sprintf('exp(%s) of size %dx%d',in.get_varname[],sz(1),sz(2)));
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=exp(in(i,j))
      end
    end
    code_insert('annotation',sprintf('end of exp(%s), result in %s',in.get_varname[],out.get_varname[]));
  end
endfunction

function out=floor_bvar(in)
  if ~is_sym(in) then out=(floor(valueof(in)));return;end
  if (prod(size(valueof(in)))==1) then
    out=symbolics(floor(valueof(in)),getunique())
    rhs=expression("floor",list(in))
    gen_def(out,rhs)
  else
    out=Empty(floor(valueof(in)))
    sz=size(valueof(out));
    code_insert('annotation',sprintf('floor(%s) of size %dx%d',in.get_varname[],sz(1),sz(2)));
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=floor(in(i,j))
      end
    end
    code_insert('annotation',sprintf('end of floor(%s), result in %s',in.get_varname[],out.get_varname[]));
  end
endfunction

function out=ceil_bvar(in)
  if ~is_sym(in) then out=(ceil(valueof(in)));return;end
  if (prod(size(valueof(in)))==1) then
    out=symbolics(ceil(valueof(in)),getunique())
    rhs=expression("ceil",list(in))
    gen_def(out,rhs)
  else
    out=Empty(ceil(valueof(in)))
    sz=size(valueof(out));
    code_insert('annotation',sprintf('ceil(%s) of size %dx%d',in.get_varname[],sz(1),sz(2)));
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=ceil(in(i,j))
      end
    end
    code_insert('annotation',sprintf('end of ceil(%s), result in %s',in.get_varname[],out.get_varname[]));
  end
endfunction

function out=int_bvar(in)
  if ~is_sym(in) then out=(int(valueof(in)));return;end
  if (prod(size(valueof(in)))==1) then
    out=symbolics(int(valueof(in)),getunique())
    rhs=expression("int",list(in))
    gen_def(out,rhs)
  else
    out=Empty(int(valueof(in)))
    sz=size(valueof(out));
    code_insert('annotation',sprintf('int(%s) of size %dx%d',in.get_varname[],sz(1),sz(2)));
    for i=1:sz(1)
      for j=1:sz(2)
        out(i,j)=int(in(i,j))
      end
    end
    code_insert('annotation',sprintf('end of int(%s), result in %s',in.get_varname[],out.get_varname[]));
  end
endfunction

function out=prod_bvar(in,varagin)
  if nargin==1 then
    if ~is_sym(in) then out=(prod(valueof(in)));return,end
    out=in(1,1)
    sz=size(valueof(in))
      for i=1:sz(1)
        for j=1:sz(2)
          if ~((i==1)&(j==1)) then  out=out*in(i,j);end
        end
      end
  elseif nargin==2 then
    in2=varargin(1)
    out=Empty(valueof(in),valueof(in2))
    sz1=size(valueof(in));sz2=size(valueof(in2));
    sz=max(sz1,sz2)
      for i=1:sz(1)
        for j=1:sz(2)
          out(i,j)=in(i,j)*in2(i,j);
        end
      end
  else
    out=in
      for i=1:nargin-1
        out=out*varagin(i)
      end
  end
endfunction

function out=sum_bvar(in,varagin)
  if nargin==1 then
    if ~is_sym(in) then out=(sum(valueof(in)));return,end
    out=in(1,1)
    sz=size(valueof(in))
      for i=1:sz(1)
        for j=1:sz(2)
          if ~((i==1)&(j==1)) then  out=out+in(i,j);end
        end
      end
  elseif nargin==2 then
    in2=varargin(1)
    out=Empty(valueof(in),valueof(in2))
    sz1=size(valueof(in));sz2=size(valueof(in2));
    sz=max(sz1,sz2)
      for i=1:sz(1)
        for j=1:sz(2)
          out(i,j)=in(i,j)+in2(i,j);
        end
      end
  else
    out=in
      for i=1:nargin-1
        out=out+varagin(i)
      end
  end
endfunction

function out=and_bvar(in,varagin)
  if nargin==1 then
    if ~is_sym(in) then out=(and(valueof(in)));return,end
    out=in(1,1)
    sz=size(valueof(in))
      for i=1:sz(1)
        for j=1:sz(2)
          if ~((i==1)&(j==1)) then  out=out&in(i,j);end
        end
      end
  elseif nargin==2 then
    in2=varargin(1)
    out=Empty(valueof(in),valueof(in2))
    sz1=size(valueof(in));sz2=size(valueof(in2));
    sz=max(sz1,sz2)
      for i=1:sz(1)
        for j=1:sz(2)
          out(i,j)=in(i,j)&in2(i,j);
        end
      end
  else
    out=in
      for i=1:nargin-1
        out=out&varagin(i)
      end
  end
endfunction

function out=or_bvar(in,varagin)
  if nargin==1 then
    if ~is_sym(in) then out=(or(valueof(in)));return,end
    out=in(1,1)
    sz=size(valueof(in))
      for i=1:sz(1)
        for j=1:sz(2)
          if ~((i==1)&(j==1)) then  out=out|in(i,j);end
        end
      end
  elseif nargin==2 then
    in2=varargin(1)
    out=Empty(valueof(in),valueof(in2))
    sz1=size(valueof(in));sz2=size(valueof(in2));
    sz=max(sz1,sz2)
      for i=1:sz(1)
        for j=1:sz(2)
          out(i,j)=in(i,j)|in2(i,j);
        end
      end
  else
    out=in
      for i=1:nargin-1
        out=out|varagin(i)
      end
  end
endfunction

function out=plus_i_i(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1)<>datatype(in2) then error("Incompatible data types.");end
    if overflow_opt=="overflow" then
      s=over_flow(i2m(in1)+i2m(in2),datatype(in1))
    elseif  overflow_opt=="satur" then
      s=saturate(i2m(in1)+i2m(in2),datatype(in1))
    else
      error("Overflow option "+overflow_opt+" unknown.")
  end
  out=convert(s,datatype(in1))
endfunction

//function out=void_plus_m_i(in1,in2)
//  out=convert(in1,datatype(in2))+in2
//endfunction

//function out=void_plus_i_m(in1,in2)
//  out=in1+convert(in2,datatype(in1))
//endfunction

function out=minus_i_i(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1)<>datatype(in2) then error("Incompatible data types.");end
    if overflow_opt=="overflow" then
      s=over_flow(i2m(in1)-i2m(in2),datatype(in1))
    elseif  overflow_opt=="satur" then
      s=saturate(i2m(in1)-i2m(in2),datatype(in1))
    else
      error("Overflow option "+overflow_opt+" unknown.")
  end
  out=convert(s,datatype(in1))
endfunction

//function out=void_minus_m_i(in1,in2)
//  out=convert(in1,datatype(in2))-in2
//endfunction

//function out=void_minus_i_m(in1,in2)
//  out=in1-convert(in2,datatype(in1))
//endfunction

function out=dst_i_i(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1)<>datatype(in2) then error("Incompatible data types.");end
    if overflow_opt=="overflow" then
      s=over_flow(i2m(in1).*i2m(in2),datatype(in1))
    elseif  overflow_opt=="satur" then
      s=saturate(i2m(in1).*i2m(in2),datatype(in1))
    else
      error("Overflow option "+overflow_opt+" unknown.")
  end
  out=convert(s,datatype(in1))
endfunction

//function out=void_dst_m_i(in1,in2)
//  out=convert(in1,datatype(in2)).*in2
//endfunction

//function out=void_dst_i_m(in1,in2)
//  out=in1.*convert(in2,datatype(in1))
//endfunction

function out=dh_i_i(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1)<>datatype(in2) then error("Incompatible data types.");end
    if overflow_opt=="overflow" then
      s=over_flow(i2m(in1).^i2m(in2),datatype(in1))
    elseif  overflow_opt=="satur" then
      s=saturate(i2m(in1).^i2m(in2),datatype(in1))
    else
      error("Overflow option "+overflow_opt+" unknown.")
  end
  out=convert(s,datatype(in1))
endfunction

//function out=void_dh_m_i(in1,in2)
//  out=convert(in1,datatype(in2)).^in2
//endfunction

//function out=void_dh_i_m(in1,in2)
//  out=in1.^convert(in2,datatype(in1))
//endfunction

function out=mult_i_i(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1)<>datatype(in2) then error("Incompatible data types.");end
    if overflow_opt=="overflow" then
      s=over_flow(i2m(in1)*i2m(in2),datatype(in1))
    elseif  overflow_opt=="satur" then
      s=saturate(i2m(in1)*i2m(in2),datatype(in1))
    else
      error("Overflow option "+overflow_opt+" unknown.")
  end
  out=convert(s,datatype(in1))
endfunction

//function out=void_mult_m_i(in1,in2)
//  out=convert(in1,datatype(in2))*in2
//endfunction

//function out=void_mult_i_m(in1,in2)
//  out=in1*convert(in2,datatype(in1))
//endfunction

function out=div_i_i(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1)<>datatype(in2) then error("Incompatible data types.");end
    if overflow_opt=="overflow" then
      s=over_flow(i2m(in1)/i2m(in2),datatype(in1))
    elseif  overflow_opt=="satur" then
      s=saturate(i2m(in1)/i2m(in2),datatype(in1))
    else
      error("Overflow option "+overflow_opt+" unknown.")
  end
  out=convert(s,datatype(in1))
endfunction

//function out=void_div_m_i(in1,in2)
//  out=convert(in1,datatype(in2))/in2
//endfunction

//function out=void_div_i_m(in1,in2)
//  out=in1/convert(in2,datatype(in1))
//endfunction

function out=dsl_i_i(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1)<>datatype(in2) then error("Incompatible data types.");end
    if overflow_opt=="overflow" then
      s=over_flow(i2m(in1)./i2m(in2),datatype(in1))
    elseif  overflow_opt=="satur" then
      s=saturate(i2m(in1)./i2m(in2),datatype(in1))
    else
      error("Overflow option "+overflow_opt+" unknown.")
  end
  out=convert(s,datatype(in1))
endfunction

//function out=void_dsl_m_i(in1,in2)
//  out=convert(in1,datatype(in2))./in2
//endfunction

//function out=void_dsl_i_m(in1,in2)
//  out=in1./convert(in2,datatype(in1))
//endfunction

function out=dbs_i_i(in1,in2)
  global overflow_option
  overflow_opt=overflow_option
  if isempty(overflow_opt) then overflow_opt="overflow";end
  if datatype(in1)<>datatype(in2) then error("Incompatible data types.");end
    if overflow_opt=="overflow" then
      s=over_flow(i2m(in1).\i2m(in2),datatype(in1))
    elseif  overflow_opt=="satur" then
      s=saturate(i2m(in1).\i2m(in2),datatype(in1))
    else
      error("Overflow option "+overflow_opt+" unknown.")
  end
  out=convert(s,datatype(in1))
endfunction

//function out=void_dbs_m_i(in1,in2)
//  out=convert(in1,datatype(in2)).\in2
//endfunction

//function out=void_dbs_i_m(in1,in2)
//  out=in1.\convert(in2,datatype(in1))
//endfunction

function out=eq_i_i(in1,in2)
  out=i2m(in1)==i2m(in2)
endfunction

function out=eq_m_i(in1,in2)
  out=(in1==i2m(in2))
endfunction

function out=eq_i_m(in1,in2)
  out=(i2m(in1)==in2)
endfunction

function out=ne_i_i(in1,in2)
  out=i2m(in1)<>i2m(in2)
endfunction

function out=ne_m_i(in1,in2)
  out=(in1<>i2m(in2))
endfunction

function out=ne_i_m(in1,in2)
  out=(i2m(in1)<>in2)
endfunction

function out=gt_i_i(in1,in2)
  out=i2m(in1)>i2m(in2)
endfunction

function out=gt_m_i(in1,in2)
  out=(in1>i2m(in2))
endfunction

function out=gt_i_m(in1,in2)
  out=(i2m(in1)>in2)
endfunction

function out=lt_i_i(in1,in2)
  out=i2m(in1)<i2m(in2)
endfunction

function out=lt_m_i(in1,in2)
  out=(in1<i2m(in2))
endfunction

function out=lt_i_m(in1,in2)
  out=(i2m(in1)<in2)
endfunction

function out=ge_i_i(in1,in2)
  out=i2m(in1)>=i2m(in2)
endfunction

function out=ge_m_i(in1,in2)
  out=(in1>=i2m(in2))
endfunction

function out=ge_i_m(in1,in2)
  out=(i2m(in1)>=in2)
endfunction

function out=le_i_i(in1,in2)
  out=i2m(in1)<=i2m(in2)
endfunction

function out=le_m_i(in1,in2)
  out=(in1<=i2m(in2))
endfunction

function out=le_i_m(in1,in2)
  out=(i2m(in1)<=in2)
endfunction

function y=_int8_m(u)
  y=m2i(u,"int8");
endfunction

function y=_int8_i(u)
  y=u.retype["int8"];
endfunction

function y=_int8_bvar(u)
  y=convert(u,"int8");
  if type(y,'short') <> 'bvar' then 
    y=bvar(varname=getunique(),value=y,symbolic=%f);
  end
endfunction
function y=_uint8_m(u)
  y=m2i(u,"uint8");
endfunction

function y=_uint8_i(u)
  y=u.retype["uint8"];
endfunction

function y=_uint8_bvar(u)
  y=convert(u,"uint8");
  if type(y,'short') <> 'bvar' then 
    y=bvar(varname=getunique(),value=y,symbolic=%f);
  end
endfunction
function y=_int16_m(u)
  y=m2i(u,"int16");
endfunction

function y=_int16_i(u)
  y=u.retype["int16"];
endfunction

function y=_int16_bvar(u)
  y=convert(u,"int16");
  if type(y,'short') <> 'bvar' then 
    y=bvar(varname=getunique(),value=y,symbolic=%f);
  end
endfunction
function y=_uint16_m(u)
  y=m2i(u,"uint16");
endfunction

function y=_uint16_i(u)
  y=u.retype["uint16"];
endfunction

function y=_uint16_bvar(u)
  y=convert(u,"uint16");
  if type(y,'short') <> 'bvar' then 
    y=bvar(varname=getunique(),value=y,symbolic=%f);
  end
endfunction
function y=_int32_m(u)
  y=m2i(u,"int32");
endfunction

function y=_int32_i(u)
  y=u.retype["int32"];
endfunction

function y=_int32_bvar(u)
  y=convert(u,"int32");
  if type(y,'short') <> 'bvar' then 
    y=bvar(varname=getunique(),value=y,symbolic=%f);
  end
endfunction
function y=_uint32_m(u)
  y=m2i(u,"uint32");
endfunction

function y=_uint32_i(u)
  y=u.retype["uint32"];
endfunction

function y=_uint32_bvar(u)
  y=convert(u,"uint32");
  if type(y,'short') <> 'bvar' then 
    y=bvar(varname=getunique(),value=y,symbolic=%f);
  end
endfunction
function y=or_m(u1,u2)
  if nargin==1 then y=or(m2b(u1)) else y=or(m2b(u1),m2b(u2));end
endfunction

function y=or_i(u1,u2)
  if nargin==1 then y=or_m(i2m(u1)) else y=or_m(i2m(u1),i2m(u2));end
endfunction
function y=and_m(u1,u2)
  if nargin==1 then y=and(m2b(u1)) else y=and(m2b(u1),m2b(u2));end
endfunction

function y=and_i(u1,u2)
  if nargin==1 then y=and_m(i2m(u1)) else y=and_m(i2m(u1),i2m(u2));end
endfunction
